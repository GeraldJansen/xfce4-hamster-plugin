/*
 * Generated by gdbus-codegen 2.40.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __HAMSTER_H__
#define __HAMSTER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Hamster */

#define TYPE_HAMSTER (hamster_get_type ())
#define HAMSTER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_HAMSTER, Hamster))
#define IS_HAMSTER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_HAMSTER))
#define HAMSTER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_HAMSTER, HamsterIface))

struct _Hamster;
typedef struct _Hamster Hamster;
typedef struct _HamsterIface HamsterIface;

struct _HamsterIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_add_activity) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    gint arg_category_id);

  gboolean (*handle_add_category) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_add_fact) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_fact,
    gint arg_start_time,
    gint arg_end_time,
    gboolean arg_temporary);

  gboolean (*handle_change_category) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint arg_id,
    gint arg_category_id);

  gboolean (*handle_get_activities) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_search);

  gboolean (*handle_get_activity_by_name) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_activity,
    gint arg_category_id,
    gboolean arg_resurrect);

  gboolean (*handle_get_categories) (
    Hamster *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_category_activities) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint arg_category_id);

  gboolean (*handle_get_category_id) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_category);

  gboolean (*handle_get_fact) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint arg_fact_id);

  gboolean (*handle_get_facts) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    guint arg_start_date,
    guint arg_end_date,
    const gchar *arg_search_terms);

  gboolean (*handle_get_tag_ids) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_tags);

  gboolean (*handle_get_tags) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_only_autocomplete);

  gboolean (*handle_get_todays_facts) (
    Hamster *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_quit) (
    Hamster *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_activity) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint arg_id);

  gboolean (*handle_remove_category) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint arg_id);

  gboolean (*handle_remove_fact) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint arg_fact_id);

  gboolean (*handle_set_tags_autocomplete) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_tags);

  gboolean (*handle_stop_tracking) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_end_time);

  gboolean (*handle_toggle) (
    Hamster *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_update_activity) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint arg_id,
    const gchar *arg_name,
    gint arg_category_id);

  gboolean (*handle_update_category) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint arg_id,
    const gchar *arg_name);

  gboolean (*handle_update_fact) (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint arg_fact_id,
    const gchar *arg_fact,
    gint arg_start_time,
    gint arg_end_time,
    gboolean arg_temporary);

  void (*activities_changed) (
    Hamster *object);

  void (*facts_changed) (
    Hamster *object);

  void (*tags_changed) (
    Hamster *object);

  void (*toggle_called) (
    Hamster *object);

};

GType hamster_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *hamster_interface_info (void);
guint hamster_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void hamster_complete_get_tags (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);

void hamster_complete_quit (
    Hamster *object,
    GDBusMethodInvocation *invocation);

void hamster_complete_get_category_activities (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);

void hamster_complete_get_tag_ids (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);

void hamster_complete_add_activity (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint unnamed_arg2);

void hamster_complete_remove_fact (
    Hamster *object,
    GDBusMethodInvocation *invocation);

void hamster_complete_get_fact (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);

void hamster_complete_update_activity (
    Hamster *object,
    GDBusMethodInvocation *invocation);

void hamster_complete_get_activity_by_name (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg3);

void hamster_complete_get_facts (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg3);

void hamster_complete_update_fact (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint unnamed_arg5);

void hamster_complete_get_category_id (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint unnamed_arg1);

void hamster_complete_add_category (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint unnamed_arg1);

void hamster_complete_remove_activity (
    Hamster *object,
    GDBusMethodInvocation *invocation);

void hamster_complete_get_todays_facts (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void hamster_complete_remove_category (
    Hamster *object,
    GDBusMethodInvocation *invocation);

void hamster_complete_set_tags_autocomplete (
    Hamster *object,
    GDBusMethodInvocation *invocation);

void hamster_complete_get_categories (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void hamster_complete_change_category (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg2);

void hamster_complete_stop_tracking (
    Hamster *object,
    GDBusMethodInvocation *invocation);

void hamster_complete_update_category (
    Hamster *object,
    GDBusMethodInvocation *invocation);

void hamster_complete_toggle (
    Hamster *object,
    GDBusMethodInvocation *invocation);

void hamster_complete_add_fact (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    gint unnamed_arg4);

void hamster_complete_get_activities (
    Hamster *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);



/* D-Bus signal emissions functions: */
void hamster_emit_facts_changed (
    Hamster *object);

void hamster_emit_activities_changed (
    Hamster *object);

void hamster_emit_toggle_called (
    Hamster *object);

void hamster_emit_tags_changed (
    Hamster *object);



/* D-Bus method calls: */
void hamster_call_get_tags (
    Hamster *proxy,
    gboolean arg_only_autocomplete,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_get_tags_finish (
    Hamster *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_get_tags_sync (
    Hamster *proxy,
    gboolean arg_only_autocomplete,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void hamster_call_quit (
    Hamster *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_quit_finish (
    Hamster *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_quit_sync (
    Hamster *proxy,
    GCancellable *cancellable,
    GError **error);

void hamster_call_get_category_activities (
    Hamster *proxy,
    gint arg_category_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_get_category_activities_finish (
    Hamster *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_get_category_activities_sync (
    Hamster *proxy,
    gint arg_category_id,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void hamster_call_get_tag_ids (
    Hamster *proxy,
    const gchar *const *arg_tags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_get_tag_ids_finish (
    Hamster *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_get_tag_ids_sync (
    Hamster *proxy,
    const gchar *const *arg_tags,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void hamster_call_add_activity (
    Hamster *proxy,
    const gchar *arg_name,
    gint arg_category_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_add_activity_finish (
    Hamster *proxy,
    gint *out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_add_activity_sync (
    Hamster *proxy,
    const gchar *arg_name,
    gint arg_category_id,
    gint *out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void hamster_call_remove_fact (
    Hamster *proxy,
    gint arg_fact_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_remove_fact_finish (
    Hamster *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_remove_fact_sync (
    Hamster *proxy,
    gint arg_fact_id,
    GCancellable *cancellable,
    GError **error);

void hamster_call_get_fact (
    Hamster *proxy,
    gint arg_fact_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_get_fact_finish (
    Hamster *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_get_fact_sync (
    Hamster *proxy,
    gint arg_fact_id,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void hamster_call_update_activity (
    Hamster *proxy,
    gint arg_id,
    const gchar *arg_name,
    gint arg_category_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_update_activity_finish (
    Hamster *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_update_activity_sync (
    Hamster *proxy,
    gint arg_id,
    const gchar *arg_name,
    gint arg_category_id,
    GCancellable *cancellable,
    GError **error);

void hamster_call_get_activity_by_name (
    Hamster *proxy,
    const gchar *arg_activity,
    gint arg_category_id,
    gboolean arg_resurrect,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_get_activity_by_name_finish (
    Hamster *proxy,
    GVariant **out_unnamed_arg3,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_get_activity_by_name_sync (
    Hamster *proxy,
    const gchar *arg_activity,
    gint arg_category_id,
    gboolean arg_resurrect,
    GVariant **out_unnamed_arg3,
    GCancellable *cancellable,
    GError **error);

void hamster_call_get_facts (
    Hamster *proxy,
    guint arg_start_date,
    guint arg_end_date,
    const gchar *arg_search_terms,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_get_facts_finish (
    Hamster *proxy,
    GVariant **out_unnamed_arg3,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_get_facts_sync (
    Hamster *proxy,
    guint arg_start_date,
    guint arg_end_date,
    const gchar *arg_search_terms,
    GVariant **out_unnamed_arg3,
    GCancellable *cancellable,
    GError **error);

void hamster_call_update_fact (
    Hamster *proxy,
    gint arg_fact_id,
    const gchar *arg_fact,
    gint arg_start_time,
    gint arg_end_time,
    gboolean arg_temporary,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_update_fact_finish (
    Hamster *proxy,
    gint *out_unnamed_arg5,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_update_fact_sync (
    Hamster *proxy,
    gint arg_fact_id,
    const gchar *arg_fact,
    gint arg_start_time,
    gint arg_end_time,
    gboolean arg_temporary,
    gint *out_unnamed_arg5,
    GCancellable *cancellable,
    GError **error);

void hamster_call_get_category_id (
    Hamster *proxy,
    const gchar *arg_category,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_get_category_id_finish (
    Hamster *proxy,
    gint *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_get_category_id_sync (
    Hamster *proxy,
    const gchar *arg_category,
    gint *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void hamster_call_add_category (
    Hamster *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_add_category_finish (
    Hamster *proxy,
    gint *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_add_category_sync (
    Hamster *proxy,
    const gchar *arg_name,
    gint *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void hamster_call_remove_activity (
    Hamster *proxy,
    gint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_remove_activity_finish (
    Hamster *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_remove_activity_sync (
    Hamster *proxy,
    gint arg_id,
    GCancellable *cancellable,
    GError **error);

void hamster_call_get_todays_facts (
    Hamster *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_get_todays_facts_finish (
    Hamster *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_get_todays_facts_sync (
    Hamster *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void hamster_call_remove_category (
    Hamster *proxy,
    gint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_remove_category_finish (
    Hamster *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_remove_category_sync (
    Hamster *proxy,
    gint arg_id,
    GCancellable *cancellable,
    GError **error);

void hamster_call_set_tags_autocomplete (
    Hamster *proxy,
    const gchar *arg_tags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_set_tags_autocomplete_finish (
    Hamster *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_set_tags_autocomplete_sync (
    Hamster *proxy,
    const gchar *arg_tags,
    GCancellable *cancellable,
    GError **error);

void hamster_call_get_categories (
    Hamster *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_get_categories_finish (
    Hamster *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_get_categories_sync (
    Hamster *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void hamster_call_change_category (
    Hamster *proxy,
    gint arg_id,
    gint arg_category_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_change_category_finish (
    Hamster *proxy,
    gboolean *out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_change_category_sync (
    Hamster *proxy,
    gint arg_id,
    gint arg_category_id,
    gboolean *out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void hamster_call_stop_tracking (
    Hamster *proxy,
    GVariant *arg_end_time,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_stop_tracking_finish (
    Hamster *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_stop_tracking_sync (
    Hamster *proxy,
    GVariant *arg_end_time,
    GCancellable *cancellable,
    GError **error);

void hamster_call_update_category (
    Hamster *proxy,
    gint arg_id,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_update_category_finish (
    Hamster *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_update_category_sync (
    Hamster *proxy,
    gint arg_id,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void hamster_call_toggle (
    Hamster *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_toggle_finish (
    Hamster *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_toggle_sync (
    Hamster *proxy,
    GCancellable *cancellable,
    GError **error);

void hamster_call_add_fact (
    Hamster *proxy,
    const gchar *arg_fact,
    gint arg_start_time,
    gint arg_end_time,
    gboolean arg_temporary,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_add_fact_finish (
    Hamster *proxy,
    gint *out_unnamed_arg4,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_add_fact_sync (
    Hamster *proxy,
    const gchar *arg_fact,
    gint arg_start_time,
    gint arg_end_time,
    gboolean arg_temporary,
    gint *out_unnamed_arg4,
    GCancellable *cancellable,
    GError **error);

void hamster_call_get_activities (
    Hamster *proxy,
    const gchar *arg_search,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hamster_call_get_activities_finish (
    Hamster *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean hamster_call_get_activities_sync (
    Hamster *proxy,
    const gchar *arg_search,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_HAMSTER_PROXY (hamster_proxy_get_type ())
#define HAMSTER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_HAMSTER_PROXY, HamsterProxy))
#define HAMSTER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_HAMSTER_PROXY, HamsterProxyClass))
#define HAMSTER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_HAMSTER_PROXY, HamsterProxyClass))
#define IS_HAMSTER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_HAMSTER_PROXY))
#define IS_HAMSTER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_HAMSTER_PROXY))

typedef struct _HamsterProxy HamsterProxy;
typedef struct _HamsterProxyClass HamsterProxyClass;
typedef struct _HamsterProxyPrivate HamsterProxyPrivate;

struct _HamsterProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  HamsterProxyPrivate *priv;
};

struct _HamsterProxyClass
{
  GDBusProxyClass parent_class;
};

GType hamster_proxy_get_type (void) G_GNUC_CONST;

void hamster_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Hamster *hamster_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Hamster *hamster_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void hamster_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Hamster *hamster_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Hamster *hamster_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_HAMSTER_SKELETON (hamster_skeleton_get_type ())
#define HAMSTER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_HAMSTER_SKELETON, HamsterSkeleton))
#define HAMSTER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_HAMSTER_SKELETON, HamsterSkeletonClass))
#define HAMSTER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_HAMSTER_SKELETON, HamsterSkeletonClass))
#define IS_HAMSTER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_HAMSTER_SKELETON))
#define IS_HAMSTER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_HAMSTER_SKELETON))

typedef struct _HamsterSkeleton HamsterSkeleton;
typedef struct _HamsterSkeletonClass HamsterSkeletonClass;
typedef struct _HamsterSkeletonPrivate HamsterSkeletonPrivate;

struct _HamsterSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  HamsterSkeletonPrivate *priv;
};

struct _HamsterSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType hamster_skeleton_get_type (void) G_GNUC_CONST;

Hamster *hamster_skeleton_new (void);


G_END_DECLS

#endif /* __HAMSTER_H__ */
