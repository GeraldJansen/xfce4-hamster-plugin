/*
 * Generated by gdbus-codegen 2.40.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __WINDOWSERVER_H__
#define __WINDOWSERVER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Hamster.WindowServer */

#define TYPE_WINDOW_SERVER (window_server_get_type ())
#define WINDOW_SERVER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WINDOW_SERVER, WindowServer))
#define IS_WINDOW_SERVER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WINDOW_SERVER))
#define WINDOW_SERVER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_WINDOW_SERVER, WindowServerIface))

struct _WindowServer;
typedef struct _WindowServer WindowServer;
typedef struct _WindowServerIface WindowServerIface;

struct _WindowServerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_about) (
    WindowServer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_edit) (
    WindowServer *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_id);

  gboolean (*handle_overview) (
    WindowServer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_preferences) (
    WindowServer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_statistics) (
    WindowServer *object,
    GDBusMethodInvocation *invocation);

};

GType window_server_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *window_server_interface_info (void);
guint window_server_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void window_server_complete_edit (
    WindowServer *object,
    GDBusMethodInvocation *invocation);

void window_server_complete_overview (
    WindowServer *object,
    GDBusMethodInvocation *invocation);

void window_server_complete_about (
    WindowServer *object,
    GDBusMethodInvocation *invocation);

void window_server_complete_statistics (
    WindowServer *object,
    GDBusMethodInvocation *invocation);

void window_server_complete_preferences (
    WindowServer *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void window_server_call_edit (
    WindowServer *proxy,
    GVariant *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean window_server_call_edit_finish (
    WindowServer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean window_server_call_edit_sync (
    WindowServer *proxy,
    GVariant *arg_id,
    GCancellable *cancellable,
    GError **error);

void window_server_call_overview (
    WindowServer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean window_server_call_overview_finish (
    WindowServer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean window_server_call_overview_sync (
    WindowServer *proxy,
    GCancellable *cancellable,
    GError **error);

void window_server_call_about (
    WindowServer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean window_server_call_about_finish (
    WindowServer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean window_server_call_about_sync (
    WindowServer *proxy,
    GCancellable *cancellable,
    GError **error);

void window_server_call_statistics (
    WindowServer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean window_server_call_statistics_finish (
    WindowServer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean window_server_call_statistics_sync (
    WindowServer *proxy,
    GCancellable *cancellable,
    GError **error);

void window_server_call_preferences (
    WindowServer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean window_server_call_preferences_finish (
    WindowServer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean window_server_call_preferences_sync (
    WindowServer *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_WINDOW_SERVER_PROXY (window_server_proxy_get_type ())
#define WINDOW_SERVER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WINDOW_SERVER_PROXY, WindowServerProxy))
#define WINDOW_SERVER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WINDOW_SERVER_PROXY, WindowServerProxyClass))
#define WINDOW_SERVER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WINDOW_SERVER_PROXY, WindowServerProxyClass))
#define IS_WINDOW_SERVER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WINDOW_SERVER_PROXY))
#define IS_WINDOW_SERVER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WINDOW_SERVER_PROXY))

typedef struct _WindowServerProxy WindowServerProxy;
typedef struct _WindowServerProxyClass WindowServerProxyClass;
typedef struct _WindowServerProxyPrivate WindowServerProxyPrivate;

struct _WindowServerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  WindowServerProxyPrivate *priv;
};

struct _WindowServerProxyClass
{
  GDBusProxyClass parent_class;
};

GType window_server_proxy_get_type (void) G_GNUC_CONST;

void window_server_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WindowServer *window_server_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
WindowServer *window_server_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void window_server_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WindowServer *window_server_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
WindowServer *window_server_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_WINDOW_SERVER_SKELETON (window_server_skeleton_get_type ())
#define WINDOW_SERVER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WINDOW_SERVER_SKELETON, WindowServerSkeleton))
#define WINDOW_SERVER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WINDOW_SERVER_SKELETON, WindowServerSkeletonClass))
#define WINDOW_SERVER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WINDOW_SERVER_SKELETON, WindowServerSkeletonClass))
#define IS_WINDOW_SERVER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WINDOW_SERVER_SKELETON))
#define IS_WINDOW_SERVER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WINDOW_SERVER_SKELETON))

typedef struct _WindowServerSkeleton WindowServerSkeleton;
typedef struct _WindowServerSkeletonClass WindowServerSkeletonClass;
typedef struct _WindowServerSkeletonPrivate WindowServerSkeletonPrivate;

struct _WindowServerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WindowServerSkeletonPrivate *priv;
};

struct _WindowServerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType window_server_skeleton_get_type (void) G_GNUC_CONST;

WindowServer *window_server_skeleton_new (void);


G_END_DECLS

#endif /* __WINDOWSERVER_H__ */
